#!/usr/bin/env bash

# Exit immediately on error
set -o nounset
set -o errexit
set -o pipefail
IFS=$'\n\t'
trap 'echo "Aborting due to errexit on line $LINENO. File $(cd $(dirname "$0"); pwd)/$(basename "$0"). Exit code: $?" >&2' ERR

## Never edit manually this line.
## Run sh ci/bumversion.sh instead
readonly YALLA_VERSION=0.1.7

## Main repo

## Set Variables

export WORKING_DIR=$(pwd)



# Exit if not args or not a yalla project
_check_is_yalla_app() {
  if [ ! -d "./yalla" ] && [ "$CMD" != "create-project" ] && [ "$CMD" != "app" ]; then
      echo -e "\n\xE2\x9C\x97 Error ! \n"
      cat <<HEREDOC
The "yalla" directory does not appear to be present.
Run <yalla create-project> or go to a directory where yalla is installed

HEREDOC
      exit 1;
  fi
}


###############################################################################
# _yalla_self_install()
#
# Usage:
#   _yalla_self_install
#
# clone remote repository
#
# @todo :
#  * install a specific version
#  * clone a tag not a branche
#

_yalla_self_install(){
    if ! [ -z $( pwd | grep 'yalla') ]; then
      echo -e $'\e[31;01m' "\n\xE2\x9C\x97 Error !"
      echo -e "It seems that you are trying to install yalla inside yalla ! \n"
    fi

    echo "Clone yalla commands and tools"

    echo ""
    git clone git@bitbucket.org:buzzaka/yalla.git yalla && \
    cd yalla && \
    git checkout -b "v${YALLA_VERSION}" "v${YALLA_VERSION}" && \
    cd ..
    echo ""
}

declare -x -f _yalla_self_install;

_yalla_usage(){
cat <<HEREDOC

Yalla is a command set to simplify the creation or maintenance of a project.

Requirements :
Docker   : https://www.docker.com/community-edition#download
Devilbox : https://bitbucket.org/buzzaka/devilbox

----------------------------------------------------------------------

Alias :
---------------

  yalla-projects        Move to main folder that contains the projects (/Users/[USER]/Webserver/devilbox/../www-docker)

Main commands :
---------------

  init                  Init a new project with the new skeleton workflow (Alias of yalla project init)
  install               Install yalla requirements from an existing yalla settings
  start                 Start services (alias of yalla dr start)
  restart               Restart services (alias of yalla dr restart)
  stop                  Stop services (alias of yalla dr stop)
  cleanup [ -v]         Remove stopped containers without asking to confirm removal.
                        < -v > Remove any anonymous volumes attached to containers
  connect               Connect to main docker container, directly in path to project (alias of yalla dr connect)
  update-cli            Update global yalla cli commands
  update-yalla            Update local yalla cli commands and tools

Tools commands :
---------------

  project               Execute project commands
      init              Initializes and configures a project to work with devilbox.
                        This command simplifies the initialization of an old project in the devilbox workflow.
                        It also allows to create the database and to use yalla commands
                        to download the database from a remote environment

---------------

  docker | dr           Execute docker actions
      config            Validate and view the Compose file
      stop              Stop services
      start             Start services
      build             Build or rebuild services
      cleanup           Remove stopped containers
      ssh               Connect to main docker container, where the code is and where the commands are available (wp cli, node, ...)
      connect           Connect to main docker container, directly in path to project
      exec              Execute a command in a running container

  yalla dr -h for list of commands

---------------

  mysql | db            Execute mysql command.
      -d                database_name -f path/to/file.sql : import a database
      -d                database_name -i "SHOW TABLES;" : run an inline sql command script
      -i                "SHOW DATABASES;" : run an inline sql command script
      -f                ./backup/create_user_and_database.sql : import an sql file

  yalla db -h  for list of commands and help

---------------

ansible-playbook | ap   Execute ansible available actions.
                        Yalla integrates ansible via an independent docker container.
       [-vikCKbe] [-e ANSIBLE EXTRA VARS] [playbook-name]...

       yalla ap -h  for list of commands

---------------

ansible-vault | av    Execute ansible available actions.
                      Yalla integrates ansible via an independent docker container.
       [-h|--help|create|decrypt|edit|encrypt|encrypt_string|rekey|view]

       yalla av -h  for list of commands and help

---------------

-h --help.            Display this help
-v, --version         Show yalla version

HEREDOC
}

main() {

  local ret=0
  local CMD=""
  local params

  ## Parse args
  if [ $# -eq 0 ]; then
    printf "No command specified\n\n"
    _yalla_usage
    exit 1
  else
    CMD=$1
    shift
  fi

  case "$CMD" in
      # Shortcuts commands
      init | install | info )
          if ! [ -d 'yalla' ]; then
            _yalla_self_install
          fi
          yalla project "${CMD}"
          ;;
      stop | start | restart | connect | cleanup )
          if ! [ $# -eq 0 ]; then
            params=("$@")
          fi

          yalla dr "${CMD}" "${params[@]}"
          ;;

      # Global commands
      docker | dr | ssh | db | mysql | ap | ansible-playbook | ansible-vault | av | project )
          # Store args, prevent $@ collision between scripts

          if ! [ $# -eq 0 ]; then
            params=("$@")
          fi

          #Check if yalla path exist or create it if it's a setup task
          _check_is_yalla_app

          # Run command
          ./yalla/main "$CMD" "${params[@]}"
          ;;

      # Utilities commands
      -v | --version)
          local VERSION=$(curl -s -L https://yalla-stable.fabernovel.co/VERSION)
          echo 'Local cli version ' ${YALLA_VERSION}
          echo "Remote cli Version ${VERSION}"

          if [ ! -f "yalla/VERSION" ]; then
            echo -e $'\e[31;01m' "\n[\xE2\x9C\x97] Unable to find yalla tools version."
            echo "Please run <yalla update-yalla>"
          else
            CURRENT=$(cat yalla/VERSION)
            if [ "${CURRENT}" != ${YALLA_VERSION} ]; then
              echo -e $'\e[31;01m' "\n[\xE2\x9C\x97] Your cli version (${YALLA_VERSION}) and your tools version (${CURRENT}) mismatch."
              echo "Please run <yalla update-yalla> or/and <yalla update-cli>"
            fi
          fi

          ;;
      -h | --help)
          _yalla_usage
          exit 0
          ;;
      update-cli)
          curl -s -L https://yalla-stable.fabernovel.co/src/cli/cli-install.sh | sh
          ;;
      update-yalla)
          _check_is_yalla_app

          ## recently, repository project-skeleton was rename yalla.
          ## It's necessary to update old remote references
          readonly old_repo=$(cat ./yalla/.git/config | grep 'git@bitbucket.org:buzzaka/project-skeleton.git')

          if [ ! -z "$old_repo" ]; then
            echo -e $'\e[33;01m' "\n[\xE2\x9A\xA0 ] An outdated remote is detected in Yalla tools. Patch it" $'\e[0m'
            sed -i '' "s/git@bitbucket.org:buzzaka\/project-skeleton.git/git@bitbucket.org:buzzaka\/yalla.git/g" ./yalla/.git/config
            git -C ./yalla/.git fetch --tags origin
          fi

          # Check if there are pending changes
          readonly output=$(git -C $(pwd)/yalla status --porcelain)

          if [ ! -z "$output" ]; then
              echo -e $'\e[33;01m' "\n[\xE2\x9A\xA0 ] There are pending changes. Please commit or abort and re-run <yalla update-yalla>" $'\e[0m'
              exit 0
          fi

          CURRENT=$(cat yalla/VERSION)
          if [ "${CURRENT}" != ${YALLA_VERSION} ]; then
            git -C ./yalla/.git fetch origin --tags --prune
            echo -e $'\e[32;01m' "\n[\xE2\x84\xB9] Now checkout last version v${YALLA_VERSION}" $'\e[0m'
            git -C $(pwd)/yalla checkout "tags/v${YALLA_VERSION}" -B "v${YALLA_VERSION}"
          else
            echo -e $'\e[32;01m' "\n[\xE2\x84\xB9] You already have latest version v${YALLA_VERSION}" $'\e[0m'
          fi
          ;;

      # Autocomplete
      shortlist)
        cat <<HEREDOC
init
install
stop
start
restart
cleanup
connect
docker
dr
mysql
db
ansible-playbook
ap
ansible-vault
av
project
ssh
-h --help
-v --version
update-cli
update-yalla
HEREDOC
        ;;
       *)
          _yalla_usage
          echo -e $'\e[31;01m' "\n[\xE2\x9C\x97] ${CMD} is not a registered command"
          ret=1
          ;;
  esac
  shift

  ret=$[$ret+$?]
  exit $ret
}

main "$@"
